/* Generated By:JJTree&JavaCC: Do not edit this line. Arbol.java */
package Aritmetica;
public class Arbol/*@bgen(jjtree)*/implements ArbolTreeConstants, ArbolConstants {/*@bgen(jjtree)*/
  protected static JJTArbolState jjtree = new JJTArbolState();
  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    Arbol t = new Arbol(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

/** 
███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░█░░░░░░░░░░█░░░░░░██████████░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀░░█░░▄▀░░░░░░░░░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░░░░░█░░░░▄▀░░░░█░░▄▀▄▀▄▀▄▀▄▀░░██░░▄▀░░█░░░░░░▄▀░░░░░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░░░░░▄▀░░░░░░█░░░░▄▀░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░█
█░░▄▀░░███████████░░▄▀░░███░░▄▀░░░░░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░█████████████░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░▄▀░░░░░░░░░░███░░▄▀░░███░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░░░░░▄▀░░█░░▄▀░░█████████████░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀░░███░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█████████████░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░░░░░░░░░▄▀░░███░░▄▀░░███░░▄▀░░██░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░░░░░▄▀░░█░░▄▀░░█████████████░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█████████░░▄▀░░███░░▄▀░░███░░▄▀░░██░░▄▀░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░█████████████░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░░░░░░░░░▄▀░░█░░░░▄▀░░░░█░░▄▀░░██░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█████░░▄▀░░█████░░░░▄▀░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀░░█░░▄▀░░██░░░░░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░█████░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░░░░░░░░░░░░░█░░░░░░░░░░█░░░░░░██████████░░░░░░█████░░░░░░█████░░░░░░██░░░░░░█░░░░░░░░░░░░░░█████░░░░░░█████░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█
███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
*/

/** Main production. */
  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      statement("");
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void statement(String espaciado) throws ParseException {
 /*@bgen(jjtree) statement */
 SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+"statement:");
    try {
      if (jj_2_1(3)) {
        declaration_statement(espaciado+"  ");
      } else if (jj_2_2(3)) {
        embedded_statement(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█ █▀▄ █▀▀ █▄░█ ▀█▀ █ █▀▀ █ █▀▀ █▀█   ▀▀   █▀▀ ▀▄▀ █▀█ █▀█ █▀▀ █▀ █▀ █ █▀█ █▄░█
█ █▄▀ ██▄ █░▀█ ░█░ █ █▀░ █ ██▄ █▀▄   ▀▀   ██▄ █░█ █▀▀ █▀▄ ██▄ ▄█ ▄█ █ █▄█ █░▀█
*/
  static final public void embedded_statement(String espaciado) throws ParseException {
 /*@bgen(jjtree) embedded_statement */
 SimpleNode jjtn000 = new SimpleNode(JJTEMBEDDED_STATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | embedded_statement");
    try {
      expression_statement(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expression_statement(String espaciado) throws ParseException {
 /*@bgen(jjtree) expression_statement */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION_STATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | expression_statement");
    try {
      statement_expression(espaciado+"  ");
      token = jj_consume_token(PUNTOCOMA);
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                             System.out.println(espaciado+"****************** <PUNTOCOMA>" + token.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void statement_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) statement_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | statement_expression");
    try {
      if (jj_2_3(3)) {
        assignment(espaciado+"  ");
      } else if (jj_2_4(3)) {
        post_increment_expression(espaciado+"  ");
      } else if (jj_2_5(3)) {
        post_decrement_expression(espaciado+"  ");
      } else if (jj_2_6(3)) {
        pre_increment_expression(espaciado+"  ");
      } else if (jj_2_7(3)) {
        pre_decrement_expression(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
▀█▀ █▄█ █▀█ █▀▀   █ █▀▄ █▀▀ █▄░█ ▀█▀ █ █▀▀ █ █▀▀ █▀█   ▀▀   █▀▀ ▀▄▀ █▀█ █▀█ █▀▀ █▀ █▀ █ █▀█ █▄░█
░█░ ░█░ █▀▀ ██▄   █ █▄▀ ██▄ █░▀█ ░█░ █ █▀░ █ ██▄ █▀▄   ▀▀   ██▄ █░█ █▀▀ █▀▄ ██▄ ▄█ ▄█ █ █▄█ █░▀█
*/
  static final public void declaration_statement(String espaciado) throws ParseException {
 /*@bgen(jjtree) declaration_statement */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION_STATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | declaration_statement");
Token token;
    try {
      local_variable_declaration(espaciado+"  ");
      token = jj_consume_token(PUNTOCOMA);
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                   System.out.println(espaciado+"****************** <PUNTOCOMA>" + token.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void local_variable_declaration(String espaciado) throws ParseException {
 /*@bgen(jjtree) local_variable_declaration */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCAL_VARIABLE_DECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | local_variable_declaration");
    try {
      local_variable_type(espaciado+"  ");
      local_variable_declarators(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
▀█▀ █▄█ █▀█ █▀▀
░█░ ░█░ █▀▀ ██▄
*/
  static final public void local_variable_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) local_variable_type */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCAL_VARIABLE_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | local_variable_type");
    try {
      type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void type(String espaciado) throws ParseException {
 /*@bgen(jjtree) type */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | type");
    try {
      value_type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void value_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) value_type */
 SimpleNode jjtn000 = new SimpleNode(JJTVALUE_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | value_type");
    try {
      non_nullable_value_type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void non_nullable_value_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) non_nullable_value_type */
 SimpleNode jjtn000 = new SimpleNode(JJTNON_NULLABLE_VALUE_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | non_nullable_value_type");
    try {
      struct_type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void struct_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) struct_type */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRUCT_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | struct_type");
    try {
      simple_type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void simple_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) simple_type */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLE_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | simple_type");
    try {
      numeric_type(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void numeric_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) numeric_type */
 SimpleNode jjtn000 = new SimpleNode(JJTNUMERIC_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | numeric_type");
    try {
      if (jj_2_8(3)) {
        integral_type(espaciado+"  ");
      } else if (jj_2_9(3)) {
        floating_point_type(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void integral_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) integral_type */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGRAL_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | integral_type");
Token token;
    try {
      if (jj_2_10(3)) {
        token = jj_consume_token(INTEGER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     System.out.println(espaciado+"****************** <INTEGER> " + token.image);
      } else if (jj_2_11(3)) {
        token = jj_consume_token(LONG);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  System.out.println(espaciado+"****************** <LONG> " + token.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void floating_point_type(String espaciado) throws ParseException {
 /*@bgen(jjtree) floating_point_type */
 SimpleNode jjtn000 = new SimpleNode(JJTFLOATING_POINT_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | floating_point_type");
Token token;
    try {
      if (jj_2_12(3)) {
        token = jj_consume_token(FLOAT);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   System.out.println(espaciado+"****************** <FLOAT> " + token.image);
      } else if (jj_2_13(3)) {
        token = jj_consume_token(DOUBLE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    System.out.println(espaciado+"****************** <DOUBLE> " + token.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█ █▀▄ █▀▀ █▄░█ ▀█▀ █ █▀▀ █ █▀▀ █▀█   ▀▀   █▀▀ ▀▄▀ █▀█ █▀█ █▀▀ █▀ █▀ █ █▀█ █▄░█   ▀█
█ █▄▀ ██▄ █░▀█ ░█░ █ █▀░ █ ██▄ █▀▄   ▀▀   ██▄ █░█ █▀▀ █▀▄ ██▄ ▄█ ▄█ █ █▄█ █░▀█   █▄
*/
  static final public void local_variable_declarators(String espaciado) throws ParseException {
 /*@bgen(jjtree) local_variable_declarators */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCAL_VARIABLE_DECLARATORS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | local_variable_declarators");
    try {
      if (jj_2_14(3)) {
        local_variable_declarator(espaciado+"  ");
      } else if (jj_2_15(3)) {
        token = jj_consume_token(COMMA);
                    System.out.println(espaciado+"******************  <COMMA> " + token.image);
        local_variable_declarator(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void local_variable_declarator(String espaciado) throws ParseException {
 /*@bgen(jjtree) local_variable_declarator */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCAL_VARIABLE_DECLARATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | local_variable_declarator");
Token token;
    try {
      if (jj_2_16(3)) {
        token = jj_consume_token(IDENTIFIER);
                         System.out.println(espaciado+"******************  <IDENTIFIER>  " + token.image);
        token = jj_consume_token(ASSIGNMENT_OPERATOR);
                                                                                                                                             System.out.println(espaciado+"******************   <ASSIGNMENT_OPERATOR>  " + token.image);
        local_variable_initializer(espaciado+"  ");
      } else if (jj_2_17(3)) {
        token = jj_consume_token(IDENTIFIER);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         System.out.println(espaciado+"******************  <IDENTIFIER>  " + token.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void local_variable_initializer(String espaciado) throws ParseException {
 /*@bgen(jjtree) local_variable_initializer */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCAL_VARIABLE_INITIALIZER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | local_variable_initializer");
    try {
      expression(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | expression");
    try {
      if (jj_2_18(3)) {
        non_assignment_expression(espaciado+"  ");
      } else if (jj_2_19(3)) {
        assignment(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
▄▀█ █▀ █▀ █ █▀▀ █▄░█
█▀█ ▄█ ▄█ █ █▄█ █░▀█
*/
  static final public void assignment(String espaciado) throws ParseException {
 /*@bgen(jjtree) assignment */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | assignment");
    try {
      unary_expression(espaciado+"  ");
      token = jj_consume_token(ASSIGNMENT_OPERATOR);
                                                                   System.out.println(espaciado+"****************** <ASSIGNMENT_OPERATOR>  " + token.image);
      expression(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█▄░█ █▀█ █▄░█   ▄▀█ █▀ █▀ █ █▀▀ █▄░█
█░▀█ █▄█ █░▀█   █▀█ ▄█ ▄█ █ █▄█ █░▀█
*/
  static final public void non_assignment_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) non_assignment_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTNON_ASSIGNMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | non_assignment_expression");
    try {
      conditional_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void conditional_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) conditional_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" |conditional_expression");
    try {
      null_coalescing_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void null_coalescing_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) null_coalescing_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTNULL_COALESCING_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | null_coalescing_expression");
    try {
      conditional_or_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void conditional_or_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) conditional_or_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_OR_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | conditional_or_expression");
    try {
      conditional_and_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void conditional_and_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) conditional_and_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_AND_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | conditional_and_expression");
    try {
      inclusive_or_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void inclusive_or_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) inclusive_or_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | inclusive_or_expression");
    try {
      exclusive_or_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void exclusive_or_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) exclusive_or_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | exclusive_or_expression");
    try {
      and_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void and_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) and_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | and_expression");
    try {
      equality_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void equality_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) equality_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALITY_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | equality_expression");
    try {
      relational_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void relational_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) relational_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | relational_expression");
    try {
      shift_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void shift_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) shift_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTSHIFT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | shift_expression");
    try {
      additive_expression(espaciado);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
▄▀█ █▀▄ █▀▄ █ ▀█▀ █ █░█ █▀▀
█▀█ █▄▀ █▄▀ █ ░█░ █ ▀▄▀ ██▄
*/
  static final public void additive_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) additive_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVE_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | additive_expression");
 Token token;
    try {
      multiplicative_expression(espaciado+"  ");
      label_1:
      while (true) {
        if (jj_2_20(3)) {
          ;
        } else {
          break label_1;
        }
        if (jj_2_21(3)) {
          token = jj_consume_token(PLUS);
                                                               System.out.println(espaciado+"******************  <PLUS>  " + token.image);
        } else if (jj_2_22(3)) {
          token = jj_consume_token(MINUS);
                                                                                                                                                                System.out.println(espaciado+"******************  <MINUS>  " + token.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicative_expression(espaciado+"  ");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void multiplicative_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) multiplicative_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | multiplicative_expression");
 Token token;
    try {
      unary_expression(espaciado+"  ");
      label_2:
      while (true) {
        if (jj_2_23(3)) {
          ;
        } else {
          break label_2;
        }
        if (jj_2_24(3)) {
          token = jj_consume_token(STAR);
                                                       System.out.println(espaciado+"******************   <STAR>  " + token.image);
        } else if (jj_2_25(3)) {
          token = jj_consume_token(SLASH);
                                                                                                                                                       System.out.println(espaciado+"******************   <SLAHS>  " + token.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        unary_expression(espaciado+"  ");
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█░█ █▄░█ ▄▀█ █▀█ █▄█
█▄█ █░▀█ █▀█ █▀▄ ░█░
*/
  static final public void unary_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) unary_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARY_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | unary_expression");
 Token token;
    try {
      if (jj_2_28(3)) {
        primary_expression(espaciado+"  ");
      } else if (jj_2_29(3)) {
        if (jj_2_26(3)) {
          token = jj_consume_token(PLUS);
                     System.out.println(espaciado+"******************  <PLUS>  " + token.image);
        } else if (jj_2_27(3)) {
          token = jj_consume_token(MINUS);
                                                                                                                         System.out.println(espaciado+"******************  <MINUS>  " + token.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        unary_expression(espaciado+"  ");
      } else if (jj_2_30(3)) {
        pre_increment_expression(espaciado+"  ");
      } else if (jj_2_31(3)) {
        pre_decrement_expression(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void pre_increment_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) pre_increment_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRE_INCREMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | pre_increment_expression");
 Token token;
    try {
      token = jj_consume_token(PLUSPLUS);
                        System.out.println(espaciado+"****************** <PLUSPLUS>  " + token.image);
      unary_expression(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void pre_decrement_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) pre_decrement_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRE_DECREMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | pre_decrement_expression");
 Token token;
    try {
      token = jj_consume_token(MINMIN);
                      System.out.println(espaciado+"******************  <MINMIN>  " + token.image);
      unary_expression(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void primary_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) primary_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMARY_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | primary_expression");
    try {
      primary_no_array_creation_expression(espaciado+"  ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void primary_no_array_creation_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) primary_no_array_creation_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMARY_NO_ARRAY_CREATION_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | primary_no_array_creation_expression");
    try {
      if (jj_2_32(3)) {
        literal(espaciado+"  ");
      } else if (jj_2_33(3)) {
        simple_name(espaciado+"  ");
      } else if (jj_2_34(3)) {
        parenthesized_expression(espaciado+"  ");
      } else if (jj_2_35(3)) {
        post_decrement_expression(espaciado+"  ");
      } else if (jj_2_36(3)) {
        post_increment_expression(espaciado+"  ");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void post_decrement_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) post_decrement_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPOST_DECREMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | post_decrement_expression");
 Token token;
    try {
      token = jj_consume_token(MINMIN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      System.out.println(espaciado+"****************** <MINMIN>  " + token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void post_increment_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) post_increment_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPOST_INCREMENT_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | post_increment_expression");
 Token token;
    try {
      token = jj_consume_token(PLUSPLUS);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       System.out.println(espaciado+"****************** <PLUSPLUS>  " + token.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

/*
█░░ █ ▀█▀ █▀▀ █▀█ ▄▀█ █░░
█▄▄ █ ░█░ ██▄ █▀▄ █▀█ █▄▄
*/
  static final public void literal(String espaciado) throws ParseException {
 /*@bgen(jjtree) literal */
 SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | literal");
Token token;
    try {
      if (jj_2_37(3)) {
        token = jj_consume_token(INTEGER_LITERAL);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             System.out.println(espaciado+" INTEGER_LITERAL  " + token.image);
      } else if (jj_2_38(3)) {
        token = jj_consume_token(REAL_LITERAL);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          System.out.println(espaciado+"REAL_LITERAL  " + token.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█▀ █ █▀▄▀█ █▀█ █░░ █▀▀ █▄░█ ▄▀█ █▀▄▀█ █▀▀
▄█ █ █░▀░█ █▀▀ █▄▄ ██▄ █░▀█ █▀█ █░▀░█ ██▄
*/
  static final public void simple_name(String espaciado) throws ParseException {
 /*@bgen(jjtree) simple_name */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLE_NAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | simple_name");
 Token token;
    try {
      token = jj_consume_token(IDENTIFIER);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        System.out.println(espaciado+"IDENTIFIER  " + token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
█▀█ ▄▀█ █▀█ █▀▀ █▄░█ ▀█▀ █▀▀ █▀ █ █▀
█▀▀ █▀█ █▀▄ ██▄ █░▀█ ░█░ ██▄ ▄█ █ ▄█
*/
  static final public void parenthesized_expression(String espaciado) throws ParseException {
 /*@bgen(jjtree) parenthesized_expression */
 SimpleNode jjtn000 = new SimpleNode(JJTPARENTHESIZED_EXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);System.out.println(espaciado+" | parenthesized_expression");
 Token token;
    try {
      token = jj_consume_token(LPAREN);
                      System.out.println(espaciado+"******************  <LPAREN>  " + token.image);
      expression(espaciado+"  ");
      token = jj_consume_token(RPAREN);
                                                                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                      jjtc000 = false;
                                                                                                                                                     System.out.println(espaciado+"****************** <RPAREN>  " + token.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGNMENT_OPERATOR)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_scan_token(PLUSPLUS)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(MINMIN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(MINMIN)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(PUNTOCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(PUNTOCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(ASSIGNMENT_OPERATOR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ArbolTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[38];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Arbol(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Arbol(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ArbolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Arbol(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ArbolTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Arbol(ArbolTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ArbolTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 38; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
